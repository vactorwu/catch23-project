//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.225
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 
namespace WebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ServiceConfiguration", Namespace="http://tempuri.org/")]
    public partial class ConfigurationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getMyConfigServiceDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMyConnectedConfigServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStartupVirtualServiceHostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getVirtualServiceHostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveCustomActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveRemoveDownedNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback isOnlineOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTraversePathOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveAddServiceHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveRemoveServiceHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveAddServiceClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveRemoveServiceClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveRemoveServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceConfigurationKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveConfigurationKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConnectionPointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConnectionPointOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveConnectionPointOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback receiveServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceNodeMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSOAMapOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActiveHostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActiveClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getConfigAuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback purgeConfigAuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback getClusterAuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback purgeClusterAuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback getErrorLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback purgeErrorLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBindingInformationOperationCompleted;
        
        /// <remarks/>
        public ConfigurationService() {
            string urlSetting = System.Configuration.ConfigurationManager.AppSettings["EndpointURL"];
            if ((urlSetting != null)) {
                this.Url = urlSetting;
            }
            else {
                this.Url = "http://catch23-7969a01/TradeWebBSL/config.svc";
            }
        }
        
        /// <remarks/>
        public event getMyConfigServiceDetailsCompletedEventHandler getMyConfigServiceDetailsCompleted;
        
        /// <remarks/>
        public event getMyConnectedConfigServicesCompletedEventHandler getMyConnectedConfigServicesCompleted;
        
        /// <remarks/>
        public event getStartupVirtualServiceHostsCompletedEventHandler getStartupVirtualServiceHostsCompleted;
        
        /// <remarks/>
        public event getVirtualServiceHostsCompletedEventHandler getVirtualServiceHostsCompleted;
        
        /// <remarks/>
        public event receiveCustomActionCompletedEventHandler receiveCustomActionCompleted;
        
        /// <remarks/>
        public event receiveRemoveDownedNodeCompletedEventHandler receiveRemoveDownedNodeCompleted;
        
        /// <remarks/>
        public event isOnlineCompletedEventHandler isOnlineCompleted;
        
        /// <remarks/>
        public event getTraversePathCompletedEventHandler getTraversePathCompleted;
        
        /// <remarks/>
        public event loginCompletedEventHandler loginCompleted;
        
        /// <remarks/>
        public event receiveAddServiceHostCompletedEventHandler receiveAddServiceHostCompleted;
        
        /// <remarks/>
        public event receiveRemoveServiceHostCompletedEventHandler receiveRemoveServiceHostCompleted;
        
        /// <remarks/>
        public event receiveAddServiceClientCompletedEventHandler receiveAddServiceClientCompleted;
        
        /// <remarks/>
        public event receiveRemoveServiceClientCompletedEventHandler receiveRemoveServiceClientCompleted;
        
        /// <remarks/>
        public event receiveRemoveServicesCompletedEventHandler receiveRemoveServicesCompleted;
        
        /// <remarks/>
        public event getServiceConfigurationCompletedEventHandler getServiceConfigurationCompleted;
        
        /// <remarks/>
        public event getServiceConfigurationKeyCompletedEventHandler getServiceConfigurationKeyCompleted;
        
        /// <remarks/>
        public event receiveConfigurationKeyCompletedEventHandler receiveConfigurationKeyCompleted;
        
        /// <remarks/>
        public event getConnectionPointsCompletedEventHandler getConnectionPointsCompleted;
        
        /// <remarks/>
        public event getConnectionPointCompletedEventHandler getConnectionPointCompleted;
        
        /// <remarks/>
        public event receiveConnectionPointCompletedEventHandler receiveConnectionPointCompleted;
        
        /// <remarks/>
        public event getServiceUsersCompletedEventHandler getServiceUsersCompleted;
        
        /// <remarks/>
        public event receiveUserCompletedEventHandler receiveUserCompleted;
        
        /// <remarks/>
        public event receiveServiceCompletedEventHandler receiveServiceCompleted;
        
        /// <remarks/>
        public event getServiceNodeMapCompletedEventHandler getServiceNodeMapCompleted;
        
        /// <remarks/>
        public event getSOAMapCompletedEventHandler getSOAMapCompleted;
        
        /// <remarks/>
        public event getActiveHostsCompletedEventHandler getActiveHostsCompleted;
        
        /// <remarks/>
        public event getActiveClientsCompletedEventHandler getActiveClientsCompleted;
        
        /// <remarks/>
        public event getConfigAuditCompletedEventHandler getConfigAuditCompleted;
        
        /// <remarks/>
        public event purgeConfigAuditCompletedEventHandler purgeConfigAuditCompleted;
        
        /// <remarks/>
        public event getClusterAuditCompletedEventHandler getClusterAuditCompleted;
        
        /// <remarks/>
        public event purgeClusterAuditCompletedEventHandler purgeClusterAuditCompleted;
        
        /// <remarks/>
        public event getErrorLogCompletedEventHandler getErrorLogCompleted;
        
        /// <remarks/>
        public event purgeErrorLogCompletedEventHandler purgeErrorLogCompleted;
        
        /// <remarks/>
        public event getBindingInformationCompletedEventHandler getBindingInformationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getMyConfigServiceDetails", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public ConnectedConfigServices[] getMyConfigServiceDetails([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string address, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string clientConfig, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getMyConfigServiceDetails", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        address,
                        clientConfig,
                        userName,
                        password,
                        csUser});
            return ((ConnectedConfigServices[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetMyConfigServiceDetails(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, string address, string clientConfig, string userName, string password, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getMyConfigServiceDetails", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        address,
                        clientConfig,
                        userName,
                        password,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ConnectedConfigServices[] EndgetMyConfigServiceDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ConnectedConfigServices[])(results[0]));
        }
        
        /// <remarks/>
        public void getMyConfigServiceDetailsAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, string address, string clientConfig, string userName, string password, ServiceUsers csUser) {
            this.getMyConfigServiceDetailsAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, address, clientConfig, userName, password, csUser, null);
        }
        
        /// <remarks/>
        public void getMyConfigServiceDetailsAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, string address, string clientConfig, string userName, string password, ServiceUsers csUser, object userState) {
            if ((this.getMyConfigServiceDetailsOperationCompleted == null)) {
                this.getMyConfigServiceDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyConfigServiceDetailsOperationCompleted);
            }
            this.InvokeAsync("getMyConfigServiceDetails", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        address,
                        clientConfig,
                        userName,
                        password,
                        csUser}, this.getMyConfigServiceDetailsOperationCompleted, userState);
        }
        
        private void OngetMyConfigServiceDetailsOperationCompleted(object arg) {
            if ((this.getMyConfigServiceDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMyConfigServiceDetailsCompleted(this, new getMyConfigServiceDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getMyConnectedConfigServices", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public ConnectedConfigServices[] getMyConnectedConfigServices([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getMyConnectedConfigServices", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            return ((ConnectedConfigServices[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetMyConnectedConfigServices(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getMyConnectedConfigServices", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ConnectedConfigServices[] EndgetMyConnectedConfigServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ConnectedConfigServices[])(results[0]));
        }
        
        /// <remarks/>
        public void getMyConnectedConfigServicesAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getMyConnectedConfigServicesAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getMyConnectedConfigServicesAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getMyConnectedConfigServicesOperationCompleted == null)) {
                this.getMyConnectedConfigServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyConnectedConfigServicesOperationCompleted);
            }
            this.InvokeAsync("getMyConnectedConfigServices", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.getMyConnectedConfigServicesOperationCompleted, userState);
        }
        
        private void OngetMyConnectedConfigServicesOperationCompleted(object arg) {
            if ((this.getMyConnectedConfigServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMyConnectedConfigServicesCompleted(this, new getMyConnectedConfigServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getStartupVirtualServiceHosts", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.RuntimeHostData.DataContract")]
        public ServiceHostInfo[] getStartupVirtualServiceHosts([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getStartupVirtualServiceHosts", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            return ((ServiceHostInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetStartupVirtualServiceHosts(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getStartupVirtualServiceHosts", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServiceHostInfo[] EndgetStartupVirtualServiceHosts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServiceHostInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getStartupVirtualServiceHostsAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getStartupVirtualServiceHostsAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getStartupVirtualServiceHostsAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getStartupVirtualServiceHostsOperationCompleted == null)) {
                this.getStartupVirtualServiceHostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStartupVirtualServiceHostsOperationCompleted);
            }
            this.InvokeAsync("getStartupVirtualServiceHosts", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.getStartupVirtualServiceHostsOperationCompleted, userState);
        }
        
        private void OngetStartupVirtualServiceHostsOperationCompleted(object arg) {
            if ((this.getStartupVirtualServiceHostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStartupVirtualServiceHostsCompleted(this, new getStartupVirtualServiceHostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getVirtualServiceHosts", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public MasterServiceHostInstance[] getVirtualServiceHosts([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getVirtualServiceHosts", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            return ((MasterServiceHostInstance[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetVirtualServiceHosts(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getVirtualServiceHosts", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public MasterServiceHostInstance[] EndgetVirtualServiceHosts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MasterServiceHostInstance[])(results[0]));
        }
        
        /// <remarks/>
        public void getVirtualServiceHostsAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getVirtualServiceHostsAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getVirtualServiceHostsAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getVirtualServiceHostsOperationCompleted == null)) {
                this.getVirtualServiceHostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVirtualServiceHostsOperationCompleted);
            }
            this.InvokeAsync("getVirtualServiceHosts", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.getVirtualServiceHostsOperationCompleted, userState);
        }
        
        private void OngetVirtualServiceHostsOperationCompleted(object arg) {
            if ((this.getVirtualServiceHostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVirtualServiceHostsCompleted(this, new getVirtualServiceHostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveCustomAction", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveCustomAction([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, bool notifyNodes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CustomAction customAction, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int receiveCustomActionResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveCustomActionResultSpecified) {
            object[] results = this.Invoke("receiveCustomAction", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        notifyNodes,
                        notifyNodesSpecified,
                        customAction,
                        traversePath,
                        csUser});
            receiveCustomActionResult = ((int)(results[0]));
            receiveCustomActionResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveCustomAction(string targetHostNameIdentifier, string targetConfigServiceName, bool notifyNodes, bool notifyNodesSpecified, CustomAction customAction, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveCustomAction", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        notifyNodes,
                        notifyNodesSpecified,
                        customAction,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveCustomAction(System.IAsyncResult asyncResult, out int receiveCustomActionResult, out bool receiveCustomActionResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveCustomActionResult = ((int)(results[0]));
            receiveCustomActionResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveCustomActionAsync(string targetHostNameIdentifier, string targetConfigServiceName, bool notifyNodes, bool notifyNodesSpecified, CustomAction customAction, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.receiveCustomActionAsync(targetHostNameIdentifier, targetConfigServiceName, notifyNodes, notifyNodesSpecified, customAction, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void receiveCustomActionAsync(string targetHostNameIdentifier, string targetConfigServiceName, bool notifyNodes, bool notifyNodesSpecified, CustomAction customAction, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.receiveCustomActionOperationCompleted == null)) {
                this.receiveCustomActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveCustomActionOperationCompleted);
            }
            this.InvokeAsync("receiveCustomAction", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        notifyNodes,
                        notifyNodesSpecified,
                        customAction,
                        traversePath,
                        csUser}, this.receiveCustomActionOperationCompleted, userState);
        }
        
        private void OnreceiveCustomActionOperationCompleted(object arg) {
            if ((this.receiveCustomActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveCustomActionCompleted(this, new receiveCustomActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveRemoveDownedNode", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveRemoveDownedNode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, bool notifyNodes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, int nodeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool nodeIDSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int receiveRemoveDownedNodeResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveRemoveDownedNodeResultSpecified) {
            object[] results = this.Invoke("receiveRemoveDownedNode", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        notifyNodes,
                        notifyNodesSpecified,
                        nodeID,
                        nodeIDSpecified,
                        traversePath,
                        csUser});
            receiveRemoveDownedNodeResult = ((int)(results[0]));
            receiveRemoveDownedNodeResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveRemoveDownedNode(string targetHostNameIdentifier, string targetConfigServiceName, bool notifyNodes, bool notifyNodesSpecified, int nodeID, bool nodeIDSpecified, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveRemoveDownedNode", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        notifyNodes,
                        notifyNodesSpecified,
                        nodeID,
                        nodeIDSpecified,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveRemoveDownedNode(System.IAsyncResult asyncResult, out int receiveRemoveDownedNodeResult, out bool receiveRemoveDownedNodeResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveRemoveDownedNodeResult = ((int)(results[0]));
            receiveRemoveDownedNodeResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveRemoveDownedNodeAsync(string targetHostNameIdentifier, string targetConfigServiceName, bool notifyNodes, bool notifyNodesSpecified, int nodeID, bool nodeIDSpecified, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.receiveRemoveDownedNodeAsync(targetHostNameIdentifier, targetConfigServiceName, notifyNodes, notifyNodesSpecified, nodeID, nodeIDSpecified, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void receiveRemoveDownedNodeAsync(string targetHostNameIdentifier, string targetConfigServiceName, bool notifyNodes, bool notifyNodesSpecified, int nodeID, bool nodeIDSpecified, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.receiveRemoveDownedNodeOperationCompleted == null)) {
                this.receiveRemoveDownedNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveRemoveDownedNodeOperationCompleted);
            }
            this.InvokeAsync("receiveRemoveDownedNode", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        notifyNodes,
                        notifyNodesSpecified,
                        nodeID,
                        nodeIDSpecified,
                        traversePath,
                        csUser}, this.receiveRemoveDownedNodeOperationCompleted, userState);
        }
        
        private void OnreceiveRemoveDownedNodeOperationCompleted(object arg) {
            if ((this.receiveRemoveDownedNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveRemoveDownedNodeCompleted(this, new receiveRemoveDownedNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("isOnline", RequestNamespace="ConfigService.ServiceConfiguration", OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void isOnline() {
            this.Invoke("isOnline", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginisOnline(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("isOnline", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndisOnline(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void isOnlineAsync() {
            this.isOnlineAsync(null);
        }
        
        /// <remarks/>
        public void isOnlineAsync(object userState) {
            if ((this.isOnlineOperationCompleted == null)) {
                this.isOnlineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisOnlineOperationCompleted);
            }
            this.InvokeAsync("isOnline", new object[0], this.isOnlineOperationCompleted, userState);
        }
        
        private void OnisOnlineOperationCompleted(object arg) {
            if ((this.isOnlineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isOnlineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getTraversePath", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")]
        public TraverseNode[] getTraversePath([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] queriedNodeList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getTraversePath", new object[] {
                        queriedNodeList,
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        csUser});
            return ((TraverseNode[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetTraversePath(TraverseNode[] queriedNodeList, string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getTraversePath", new object[] {
                        queriedNodeList,
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public TraverseNode[] EndgetTraversePath(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TraverseNode[])(results[0]));
        }
        
        /// <remarks/>
        public void getTraversePathAsync(TraverseNode[] queriedNodeList, string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ServiceUsers csUser) {
            this.getTraversePathAsync(queriedNodeList, targetHostNameIdentifier, targetConfigServiceNameIdentifier, csUser, null);
        }
        
        /// <remarks/>
        public void getTraversePathAsync(TraverseNode[] queriedNodeList, string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ServiceUsers csUser, object userState) {
            if ((this.getTraversePathOperationCompleted == null)) {
                this.getTraversePathOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTraversePathOperationCompleted);
            }
            this.InvokeAsync("getTraversePath", new object[] {
                        queriedNodeList,
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        csUser}, this.getTraversePathOperationCompleted, userState);
        }
        
        private void OngetTraversePathOperationCompleted(object arg) {
            if ((this.getTraversePathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTraversePathCompleted(this, new getTraversePathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("login", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public LoginInfo login([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("login", new object[] {
                        csUser});
            return ((LoginInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginlogin(ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("login", new object[] {
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public LoginInfo Endlogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LoginInfo)(results[0]));
        }
        
        /// <remarks/>
        public void loginAsync(ServiceUsers csUser) {
            this.loginAsync(csUser, null);
        }
        
        /// <remarks/>
        public void loginAsync(ServiceUsers csUser, object userState) {
            if ((this.loginOperationCompleted == null)) {
                this.loginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginOperationCompleted);
            }
            this.InvokeAsync("login", new object[] {
                        csUser}, this.loginOperationCompleted, userState);
        }
        
        private void OnloginOperationCompleted(object arg) {
            if ((this.loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginCompleted(this, new loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveAddServiceHost", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveAddServiceHost([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceNameIdentifier, bool notifyNodes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")] HostListenEndPointInstance[] newConfigEndpoints, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")] HostListenEndPointInstance[] newPrimaryEndpoints, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out bool receiveAddServiceHostResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveAddServiceHostResultSpecified) {
            object[] results = this.Invoke("receiveAddServiceHost", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        notifyNodes,
                        notifyNodesSpecified,
                        newConfigEndpoints,
                        newPrimaryEndpoints,
                        csUser});
            receiveAddServiceHostResult = ((bool)(results[0]));
            receiveAddServiceHostResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveAddServiceHost(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] newConfigEndpoints, HostListenEndPointInstance[] newPrimaryEndpoints, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveAddServiceHost", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        notifyNodes,
                        notifyNodesSpecified,
                        newConfigEndpoints,
                        newPrimaryEndpoints,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveAddServiceHost(System.IAsyncResult asyncResult, out bool receiveAddServiceHostResult, out bool receiveAddServiceHostResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveAddServiceHostResult = ((bool)(results[0]));
            receiveAddServiceHostResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveAddServiceHostAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] newConfigEndpoints, HostListenEndPointInstance[] newPrimaryEndpoints, ServiceUsers csUser) {
            this.receiveAddServiceHostAsync(targetHostNameIdentifier, targetConfigServiceNameIdentifier, notifyNodes, notifyNodesSpecified, newConfigEndpoints, newPrimaryEndpoints, csUser, null);
        }
        
        /// <remarks/>
        public void receiveAddServiceHostAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] newConfigEndpoints, HostListenEndPointInstance[] newPrimaryEndpoints, ServiceUsers csUser, object userState) {
            if ((this.receiveAddServiceHostOperationCompleted == null)) {
                this.receiveAddServiceHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveAddServiceHostOperationCompleted);
            }
            this.InvokeAsync("receiveAddServiceHost", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        notifyNodes,
                        notifyNodesSpecified,
                        newConfigEndpoints,
                        newPrimaryEndpoints,
                        csUser}, this.receiveAddServiceHostOperationCompleted, userState);
        }
        
        private void OnreceiveAddServiceHostOperationCompleted(object arg) {
            if ((this.receiveAddServiceHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveAddServiceHostCompleted(this, new receiveAddServiceHostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveRemoveServiceHost", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveRemoveServiceHost([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceNameIdentifier, bool notifyNodes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")] HostListenEndPointInstance[] removeConfigEndpoints, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")] HostListenEndPointInstance[] removePrimaryEndpoints, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out bool receiveRemoveServiceHostResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveRemoveServiceHostResultSpecified) {
            object[] results = this.Invoke("receiveRemoveServiceHost", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        notifyNodes,
                        notifyNodesSpecified,
                        removeConfigEndpoints,
                        removePrimaryEndpoints,
                        csUser});
            receiveRemoveServiceHostResult = ((bool)(results[0]));
            receiveRemoveServiceHostResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveRemoveServiceHost(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] removeConfigEndpoints, HostListenEndPointInstance[] removePrimaryEndpoints, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveRemoveServiceHost", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        notifyNodes,
                        notifyNodesSpecified,
                        removeConfigEndpoints,
                        removePrimaryEndpoints,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveRemoveServiceHost(System.IAsyncResult asyncResult, out bool receiveRemoveServiceHostResult, out bool receiveRemoveServiceHostResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveRemoveServiceHostResult = ((bool)(results[0]));
            receiveRemoveServiceHostResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveRemoveServiceHostAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] removeConfigEndpoints, HostListenEndPointInstance[] removePrimaryEndpoints, ServiceUsers csUser) {
            this.receiveRemoveServiceHostAsync(targetHostNameIdentifier, targetConfigServiceNameIdentifier, notifyNodes, notifyNodesSpecified, removeConfigEndpoints, removePrimaryEndpoints, csUser, null);
        }
        
        /// <remarks/>
        public void receiveRemoveServiceHostAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] removeConfigEndpoints, HostListenEndPointInstance[] removePrimaryEndpoints, ServiceUsers csUser, object userState) {
            if ((this.receiveRemoveServiceHostOperationCompleted == null)) {
                this.receiveRemoveServiceHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveRemoveServiceHostOperationCompleted);
            }
            this.InvokeAsync("receiveRemoveServiceHost", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        notifyNodes,
                        notifyNodesSpecified,
                        removeConfigEndpoints,
                        removePrimaryEndpoints,
                        csUser}, this.receiveRemoveServiceHostOperationCompleted, userState);
        }
        
        private void OnreceiveRemoveServiceHostOperationCompleted(object arg) {
            if ((this.receiveRemoveServiceHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveRemoveServiceHostCompleted(this, new receiveRemoveServiceHostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveAddServiceClient", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveAddServiceClient([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")] HostListenEndPointInstance[] newConfigEndpoints, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out bool receiveAddServiceClientResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveAddServiceClientResultSpecified) {
            object[] results = this.Invoke("receiveAddServiceClient", new object[] {
                        newConfigEndpoints,
                        csUser});
            receiveAddServiceClientResult = ((bool)(results[0]));
            receiveAddServiceClientResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveAddServiceClient(HostListenEndPointInstance[] newConfigEndpoints, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveAddServiceClient", new object[] {
                        newConfigEndpoints,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveAddServiceClient(System.IAsyncResult asyncResult, out bool receiveAddServiceClientResult, out bool receiveAddServiceClientResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveAddServiceClientResult = ((bool)(results[0]));
            receiveAddServiceClientResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveAddServiceClientAsync(HostListenEndPointInstance[] newConfigEndpoints, ServiceUsers csUser) {
            this.receiveAddServiceClientAsync(newConfigEndpoints, csUser, null);
        }
        
        /// <remarks/>
        public void receiveAddServiceClientAsync(HostListenEndPointInstance[] newConfigEndpoints, ServiceUsers csUser, object userState) {
            if ((this.receiveAddServiceClientOperationCompleted == null)) {
                this.receiveAddServiceClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveAddServiceClientOperationCompleted);
            }
            this.InvokeAsync("receiveAddServiceClient", new object[] {
                        newConfigEndpoints,
                        csUser}, this.receiveAddServiceClientOperationCompleted, userState);
        }
        
        private void OnreceiveAddServiceClientOperationCompleted(object arg) {
            if ((this.receiveAddServiceClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveAddServiceClientCompleted(this, new receiveAddServiceClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveRemoveServiceClient", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveRemoveServiceClient([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")] HostListenEndPointInstance[] removeConfigEndpoints, bool physicallyDelete, [System.Xml.Serialization.XmlIgnoreAttribute()] bool physicallyDeleteSpecified, bool all, [System.Xml.Serialization.XmlIgnoreAttribute()] bool allSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out bool receiveRemoveServiceClientResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveRemoveServiceClientResultSpecified) {
            object[] results = this.Invoke("receiveRemoveServiceClient", new object[] {
                        removeConfigEndpoints,
                        physicallyDelete,
                        physicallyDeleteSpecified,
                        all,
                        allSpecified,
                        csUser});
            receiveRemoveServiceClientResult = ((bool)(results[0]));
            receiveRemoveServiceClientResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveRemoveServiceClient(HostListenEndPointInstance[] removeConfigEndpoints, bool physicallyDelete, bool physicallyDeleteSpecified, bool all, bool allSpecified, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveRemoveServiceClient", new object[] {
                        removeConfigEndpoints,
                        physicallyDelete,
                        physicallyDeleteSpecified,
                        all,
                        allSpecified,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveRemoveServiceClient(System.IAsyncResult asyncResult, out bool receiveRemoveServiceClientResult, out bool receiveRemoveServiceClientResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveRemoveServiceClientResult = ((bool)(results[0]));
            receiveRemoveServiceClientResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveRemoveServiceClientAsync(HostListenEndPointInstance[] removeConfigEndpoints, bool physicallyDelete, bool physicallyDeleteSpecified, bool all, bool allSpecified, ServiceUsers csUser) {
            this.receiveRemoveServiceClientAsync(removeConfigEndpoints, physicallyDelete, physicallyDeleteSpecified, all, allSpecified, csUser, null);
        }
        
        /// <remarks/>
        public void receiveRemoveServiceClientAsync(HostListenEndPointInstance[] removeConfigEndpoints, bool physicallyDelete, bool physicallyDeleteSpecified, bool all, bool allSpecified, ServiceUsers csUser, object userState) {
            if ((this.receiveRemoveServiceClientOperationCompleted == null)) {
                this.receiveRemoveServiceClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveRemoveServiceClientOperationCompleted);
            }
            this.InvokeAsync("receiveRemoveServiceClient", new object[] {
                        removeConfigEndpoints,
                        physicallyDelete,
                        physicallyDeleteSpecified,
                        all,
                        allSpecified,
                        csUser}, this.receiveRemoveServiceClientOperationCompleted, userState);
        }
        
        private void OnreceiveRemoveServiceClientOperationCompleted(object arg) {
            if ((this.receiveRemoveServiceClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveRemoveServiceClientCompleted(this, new receiveRemoveServiceClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveRemoveServices", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveRemoveServices(bool notifyNodes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sourceHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sourceConfigNameIdentifier, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] removeHostedServiceNames, int serviceType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool serviceTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int receiveRemoveServicesResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveRemoveServicesResultSpecified) {
            object[] results = this.Invoke("receiveRemoveServices", new object[] {
                        notifyNodes,
                        notifyNodesSpecified,
                        sourceHostNameIdentifier,
                        sourceConfigNameIdentifier,
                        removeHostedServiceNames,
                        serviceType,
                        serviceTypeSpecified,
                        csUser});
            receiveRemoveServicesResult = ((int)(results[0]));
            receiveRemoveServicesResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveRemoveServices(bool notifyNodes, bool notifyNodesSpecified, string sourceHostNameIdentifier, string sourceConfigNameIdentifier, string[] removeHostedServiceNames, int serviceType, bool serviceTypeSpecified, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveRemoveServices", new object[] {
                        notifyNodes,
                        notifyNodesSpecified,
                        sourceHostNameIdentifier,
                        sourceConfigNameIdentifier,
                        removeHostedServiceNames,
                        serviceType,
                        serviceTypeSpecified,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveRemoveServices(System.IAsyncResult asyncResult, out int receiveRemoveServicesResult, out bool receiveRemoveServicesResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveRemoveServicesResult = ((int)(results[0]));
            receiveRemoveServicesResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveRemoveServicesAsync(bool notifyNodes, bool notifyNodesSpecified, string sourceHostNameIdentifier, string sourceConfigNameIdentifier, string[] removeHostedServiceNames, int serviceType, bool serviceTypeSpecified, ServiceUsers csUser) {
            this.receiveRemoveServicesAsync(notifyNodes, notifyNodesSpecified, sourceHostNameIdentifier, sourceConfigNameIdentifier, removeHostedServiceNames, serviceType, serviceTypeSpecified, csUser, null);
        }
        
        /// <remarks/>
        public void receiveRemoveServicesAsync(bool notifyNodes, bool notifyNodesSpecified, string sourceHostNameIdentifier, string sourceConfigNameIdentifier, string[] removeHostedServiceNames, int serviceType, bool serviceTypeSpecified, ServiceUsers csUser, object userState) {
            if ((this.receiveRemoveServicesOperationCompleted == null)) {
                this.receiveRemoveServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveRemoveServicesOperationCompleted);
            }
            this.InvokeAsync("receiveRemoveServices", new object[] {
                        notifyNodes,
                        notifyNodesSpecified,
                        sourceHostNameIdentifier,
                        sourceConfigNameIdentifier,
                        removeHostedServiceNames,
                        serviceType,
                        serviceTypeSpecified,
                        csUser}, this.receiveRemoveServicesOperationCompleted, userState);
        }
        
        private void OnreceiveRemoveServicesOperationCompleted(object arg) {
            if ((this.receiveRemoveServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveRemoveServicesCompleted(this, new receiveRemoveServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getServiceConfiguration", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public ServiceConfigurationData[] getServiceConfiguration([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, int configurationLevel, [System.Xml.Serialization.XmlIgnoreAttribute()] bool configurationLevelSpecified, bool probeDeeper, [System.Xml.Serialization.XmlIgnoreAttribute()] bool probeDeeperSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getServiceConfiguration", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        configurationLevel,
                        configurationLevelSpecified,
                        probeDeeper,
                        probeDeeperSpecified,
                        traversePath,
                        csUser});
            return ((ServiceConfigurationData[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetServiceConfiguration(string targetHostNameIdentifier, string targetConfigServiceName, int configurationLevel, bool configurationLevelSpecified, bool probeDeeper, bool probeDeeperSpecified, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getServiceConfiguration", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        configurationLevel,
                        configurationLevelSpecified,
                        probeDeeper,
                        probeDeeperSpecified,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServiceConfigurationData[] EndgetServiceConfiguration(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServiceConfigurationData[])(results[0]));
        }
        
        /// <remarks/>
        public void getServiceConfigurationAsync(string targetHostNameIdentifier, string targetConfigServiceName, int configurationLevel, bool configurationLevelSpecified, bool probeDeeper, bool probeDeeperSpecified, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getServiceConfigurationAsync(targetHostNameIdentifier, targetConfigServiceName, configurationLevel, configurationLevelSpecified, probeDeeper, probeDeeperSpecified, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getServiceConfigurationAsync(string targetHostNameIdentifier, string targetConfigServiceName, int configurationLevel, bool configurationLevelSpecified, bool probeDeeper, bool probeDeeperSpecified, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getServiceConfigurationOperationCompleted == null)) {
                this.getServiceConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceConfigurationOperationCompleted);
            }
            this.InvokeAsync("getServiceConfiguration", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        configurationLevel,
                        configurationLevelSpecified,
                        probeDeeper,
                        probeDeeperSpecified,
                        traversePath,
                        csUser}, this.getServiceConfigurationOperationCompleted, userState);
        }
        
        private void OngetServiceConfigurationOperationCompleted(object arg) {
            if ((this.getServiceConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceConfigurationCompleted(this, new getServiceConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getServiceConfigurationKey", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ConfigurationKeyValues getServiceConfigurationKey([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string settingsClassFieldName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getServiceConfigurationKey", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        settingsClassFieldName,
                        traversePath,
                        csUser});
            return ((ConfigurationKeyValues)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetServiceConfigurationKey(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, string settingsClassFieldName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getServiceConfigurationKey", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        settingsClassFieldName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ConfigurationKeyValues EndgetServiceConfigurationKey(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ConfigurationKeyValues)(results[0]));
        }
        
        /// <remarks/>
        public void getServiceConfigurationKeyAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, string settingsClassFieldName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getServiceConfigurationKeyAsync(targetHostNameIdentifier, targetConfigServiceNameIdentifier, settingsClassFieldName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getServiceConfigurationKeyAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, string settingsClassFieldName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getServiceConfigurationKeyOperationCompleted == null)) {
                this.getServiceConfigurationKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceConfigurationKeyOperationCompleted);
            }
            this.InvokeAsync("getServiceConfigurationKey", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        settingsClassFieldName,
                        traversePath,
                        csUser}, this.getServiceConfigurationKeyOperationCompleted, userState);
        }
        
        private void OngetServiceConfigurationKeyOperationCompleted(object arg) {
            if ((this.getServiceConfigurationKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceConfigurationKeyCompleted(this, new getServiceConfigurationKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveConfigurationKey", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveConfigurationKey([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ConfigurationKeyValues oldKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ConfigurationKeyValues newKey, bool notifyNodes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string action, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int receiveConfigurationKeyResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveConfigurationKeyResultSpecified) {
            object[] results = this.Invoke("receiveConfigurationKey", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        oldKey,
                        newKey,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser});
            receiveConfigurationKeyResult = ((int)(results[0]));
            receiveConfigurationKeyResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveConfigurationKey(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ConfigurationKeyValues oldKey, ConfigurationKeyValues newKey, bool notifyNodes, bool notifyNodesSpecified, string action, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveConfigurationKey", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        oldKey,
                        newKey,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveConfigurationKey(System.IAsyncResult asyncResult, out int receiveConfigurationKeyResult, out bool receiveConfigurationKeyResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveConfigurationKeyResult = ((int)(results[0]));
            receiveConfigurationKeyResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveConfigurationKeyAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ConfigurationKeyValues oldKey, ConfigurationKeyValues newKey, bool notifyNodes, bool notifyNodesSpecified, string action, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.receiveConfigurationKeyAsync(targetHostNameIdentifier, targetConfigServiceNameIdentifier, oldKey, newKey, notifyNodes, notifyNodesSpecified, action, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void receiveConfigurationKeyAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ConfigurationKeyValues oldKey, ConfigurationKeyValues newKey, bool notifyNodes, bool notifyNodesSpecified, string action, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.receiveConfigurationKeyOperationCompleted == null)) {
                this.receiveConfigurationKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveConfigurationKeyOperationCompleted);
            }
            this.InvokeAsync("receiveConfigurationKey", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        oldKey,
                        newKey,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser}, this.receiveConfigurationKeyOperationCompleted, userState);
        }
        
        private void OnreceiveConfigurationKeyOperationCompleted(object arg) {
            if ((this.receiveConfigurationKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveConfigurationKeyCompleted(this, new receiveConfigurationKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getConnectionPoints", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ConnectionPoints getConnectionPoints([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] connectionPointTypes, bool checkStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] bool checkStatusSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getConnectionPoints", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        connectionPointTypes,
                        checkStatus,
                        checkStatusSpecified,
                        traversePath,
                        csUser});
            return ((ConnectionPoints)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetConnectionPoints(string targetHostNameIdentifier, string targetConfigServiceName, int[] connectionPointTypes, bool checkStatus, bool checkStatusSpecified, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getConnectionPoints", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        connectionPointTypes,
                        checkStatus,
                        checkStatusSpecified,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ConnectionPoints EndgetConnectionPoints(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ConnectionPoints)(results[0]));
        }
        
        /// <remarks/>
        public void getConnectionPointsAsync(string targetHostNameIdentifier, string targetConfigServiceName, int[] connectionPointTypes, bool checkStatus, bool checkStatusSpecified, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getConnectionPointsAsync(targetHostNameIdentifier, targetConfigServiceName, connectionPointTypes, checkStatus, checkStatusSpecified, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getConnectionPointsAsync(string targetHostNameIdentifier, string targetConfigServiceName, int[] connectionPointTypes, bool checkStatus, bool checkStatusSpecified, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getConnectionPointsOperationCompleted == null)) {
                this.getConnectionPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConnectionPointsOperationCompleted);
            }
            this.InvokeAsync("getConnectionPoints", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        connectionPointTypes,
                        checkStatus,
                        checkStatusSpecified,
                        traversePath,
                        csUser}, this.getConnectionPointsOperationCompleted, userState);
        }
        
        private void OngetConnectionPointsOperationCompleted(object arg) {
            if ((this.getConnectionPointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConnectionPointsCompleted(this, new getConnectionPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getConnectionPoint", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ConnectionPoints getConnectionPoint([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, int instanceID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool instanceIDSpecified, bool checkStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] bool checkStatusSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getConnectionPoint", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        instanceID,
                        instanceIDSpecified,
                        checkStatus,
                        checkStatusSpecified,
                        traversePath,
                        csUser});
            return ((ConnectionPoints)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetConnectionPoint(string targetHostNameIdentifier, string targetConfigServiceName, int instanceID, bool instanceIDSpecified, bool checkStatus, bool checkStatusSpecified, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getConnectionPoint", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        instanceID,
                        instanceIDSpecified,
                        checkStatus,
                        checkStatusSpecified,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ConnectionPoints EndgetConnectionPoint(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ConnectionPoints)(results[0]));
        }
        
        /// <remarks/>
        public void getConnectionPointAsync(string targetHostNameIdentifier, string targetConfigServiceName, int instanceID, bool instanceIDSpecified, bool checkStatus, bool checkStatusSpecified, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getConnectionPointAsync(targetHostNameIdentifier, targetConfigServiceName, instanceID, instanceIDSpecified, checkStatus, checkStatusSpecified, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getConnectionPointAsync(string targetHostNameIdentifier, string targetConfigServiceName, int instanceID, bool instanceIDSpecified, bool checkStatus, bool checkStatusSpecified, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getConnectionPointOperationCompleted == null)) {
                this.getConnectionPointOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConnectionPointOperationCompleted);
            }
            this.InvokeAsync("getConnectionPoint", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        instanceID,
                        instanceIDSpecified,
                        checkStatus,
                        checkStatusSpecified,
                        traversePath,
                        csUser}, this.getConnectionPointOperationCompleted, userState);
        }
        
        private void OngetConnectionPointOperationCompleted(object arg) {
            if ((this.getConnectionPointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConnectionPointCompleted(this, new getConnectionPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveConnectionPoint", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveConnectionPoint([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] HostListenEndPointInstance oldConnection, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] HostListenEndPointInstance newConnection, bool notifyNodes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")] HostListenEndPointInstance[] targetServices, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string action, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int receiveConnectionPointResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveConnectionPointResultSpecified) {
            object[] results = this.Invoke("receiveConnectionPoint", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        oldConnection,
                        newConnection,
                        notifyNodes,
                        notifyNodesSpecified,
                        targetServices,
                        action,
                        traversePath,
                        csUser});
            receiveConnectionPointResult = ((int)(results[0]));
            receiveConnectionPointResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveConnectionPoint(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, HostListenEndPointInstance oldConnection, HostListenEndPointInstance newConnection, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] targetServices, string action, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveConnectionPoint", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        oldConnection,
                        newConnection,
                        notifyNodes,
                        notifyNodesSpecified,
                        targetServices,
                        action,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveConnectionPoint(System.IAsyncResult asyncResult, out int receiveConnectionPointResult, out bool receiveConnectionPointResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveConnectionPointResult = ((int)(results[0]));
            receiveConnectionPointResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveConnectionPointAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, HostListenEndPointInstance oldConnection, HostListenEndPointInstance newConnection, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] targetServices, string action, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.receiveConnectionPointAsync(targetHostNameIdentifier, targetConfigServiceNameIdentifier, oldConnection, newConnection, notifyNodes, notifyNodesSpecified, targetServices, action, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void receiveConnectionPointAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, HostListenEndPointInstance oldConnection, HostListenEndPointInstance newConnection, bool notifyNodes, bool notifyNodesSpecified, HostListenEndPointInstance[] targetServices, string action, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.receiveConnectionPointOperationCompleted == null)) {
                this.receiveConnectionPointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveConnectionPointOperationCompleted);
            }
            this.InvokeAsync("receiveConnectionPoint", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        oldConnection,
                        newConnection,
                        notifyNodes,
                        notifyNodesSpecified,
                        targetServices,
                        action,
                        traversePath,
                        csUser}, this.receiveConnectionPointOperationCompleted, userState);
        }
        
        private void OnreceiveConnectionPointOperationCompleted(object arg) {
            if ((this.receiveConnectionPointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveConnectionPointCompleted(this, new receiveConnectionPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getServiceUsers", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public ServiceUsers[] getServiceUsers([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getServiceUsers", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            return ((ServiceUsers[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetServiceUsers(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getServiceUsers", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServiceUsers[] EndgetServiceUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServiceUsers[])(results[0]));
        }
        
        /// <remarks/>
        public void getServiceUsersAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getServiceUsersAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getServiceUsersAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getServiceUsersOperationCompleted == null)) {
                this.getServiceUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceUsersOperationCompleted);
            }
            this.InvokeAsync("getServiceUsers", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.getServiceUsersOperationCompleted, userState);
        }
        
        private void OngetServiceUsersOperationCompleted(object arg) {
            if ((this.getServiceUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceUsersCompleted(this, new getServiceUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveUser", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers newUser, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers oldUser, bool notifyNodes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string action, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int receiveUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveUserResultSpecified) {
            object[] results = this.Invoke("receiveUser", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        newUser,
                        oldUser,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser});
            receiveUserResult = ((int)(results[0]));
            receiveUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveUser(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ServiceUsers newUser, ServiceUsers oldUser, bool notifyNodes, bool notifyNodesSpecified, string action, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("receiveUser", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        newUser,
                        oldUser,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveUser(System.IAsyncResult asyncResult, out int receiveUserResult, out bool receiveUserResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveUserResult = ((int)(results[0]));
            receiveUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveUserAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ServiceUsers newUser, ServiceUsers oldUser, bool notifyNodes, bool notifyNodesSpecified, string action, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.receiveUserAsync(targetHostNameIdentifier, targetConfigServiceNameIdentifier, newUser, oldUser, notifyNodes, notifyNodesSpecified, action, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void receiveUserAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, ServiceUsers newUser, ServiceUsers oldUser, bool notifyNodes, bool notifyNodesSpecified, string action, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.receiveUserOperationCompleted == null)) {
                this.receiveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveUserOperationCompleted);
            }
            this.InvokeAsync("receiveUser", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        newUser,
                        oldUser,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser}, this.receiveUserOperationCompleted, userState);
        }
        
        private void OnreceiveUserOperationCompleted(object arg) {
            if ((this.receiveUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveUserCompleted(this, new receiveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("receiveService", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void receiveService(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceNameIdentifier, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] HostedServices thisOldHostedService, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] HostedServices thisHostedService, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ConnectedServices thisOldConnectedService, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ConnectedServices thisConnectedService, 
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")] ConnectedConfigServices[] configServices, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] MasterServiceHostInstance thisOldServiceHost, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] MasterServiceHostInstance thisServiceHost, 
                    bool notifyNodes, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool notifyNodesSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string action, 
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, 
                    out int receiveServiceResult, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] out bool receiveServiceResultSpecified) {
            object[] results = this.Invoke("receiveService", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        thisOldHostedService,
                        thisHostedService,
                        thisOldConnectedService,
                        thisConnectedService,
                        configServices,
                        thisOldServiceHost,
                        thisServiceHost,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser});
            receiveServiceResult = ((int)(results[0]));
            receiveServiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreceiveService(
                    string targetHostNameIdentifier, 
                    string targetConfigServiceNameIdentifier, 
                    HostedServices thisOldHostedService, 
                    HostedServices thisHostedService, 
                    ConnectedServices thisOldConnectedService, 
                    ConnectedServices thisConnectedService, 
                    ConnectedConfigServices[] configServices, 
                    MasterServiceHostInstance thisOldServiceHost, 
                    MasterServiceHostInstance thisServiceHost, 
                    bool notifyNodes, 
                    bool notifyNodesSpecified, 
                    string action, 
                    TraverseNode[] traversePath, 
                    ServiceUsers csUser, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("receiveService", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        thisOldHostedService,
                        thisHostedService,
                        thisOldConnectedService,
                        thisConnectedService,
                        configServices,
                        thisOldServiceHost,
                        thisServiceHost,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndreceiveService(System.IAsyncResult asyncResult, out int receiveServiceResult, out bool receiveServiceResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            receiveServiceResult = ((int)(results[0]));
            receiveServiceResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void receiveServiceAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, HostedServices thisOldHostedService, HostedServices thisHostedService, ConnectedServices thisOldConnectedService, ConnectedServices thisConnectedService, ConnectedConfigServices[] configServices, MasterServiceHostInstance thisOldServiceHost, MasterServiceHostInstance thisServiceHost, bool notifyNodes, bool notifyNodesSpecified, string action, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.receiveServiceAsync(targetHostNameIdentifier, targetConfigServiceNameIdentifier, thisOldHostedService, thisHostedService, thisOldConnectedService, thisConnectedService, configServices, thisOldServiceHost, thisServiceHost, notifyNodes, notifyNodesSpecified, action, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void receiveServiceAsync(string targetHostNameIdentifier, string targetConfigServiceNameIdentifier, HostedServices thisOldHostedService, HostedServices thisHostedService, ConnectedServices thisOldConnectedService, ConnectedServices thisConnectedService, ConnectedConfigServices[] configServices, MasterServiceHostInstance thisOldServiceHost, MasterServiceHostInstance thisServiceHost, bool notifyNodes, bool notifyNodesSpecified, string action, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.receiveServiceOperationCompleted == null)) {
                this.receiveServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreceiveServiceOperationCompleted);
            }
            this.InvokeAsync("receiveService", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceNameIdentifier,
                        thisOldHostedService,
                        thisHostedService,
                        thisOldConnectedService,
                        thisConnectedService,
                        configServices,
                        thisOldServiceHost,
                        thisServiceHost,
                        notifyNodes,
                        notifyNodesSpecified,
                        action,
                        traversePath,
                        csUser}, this.receiveServiceOperationCompleted, userState);
        }
        
        private void OnreceiveServiceOperationCompleted(object arg) {
            if ((this.receiveServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.receiveServiceCompleted(this, new receiveServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getServiceNodeMap", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public VirtualHost getServiceNodeMap([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getServiceNodeMap", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            return ((VirtualHost)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetServiceNodeMap(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getServiceNodeMap", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public VirtualHost EndgetServiceNodeMap(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VirtualHost)(results[0]));
        }
        
        /// <remarks/>
        public void getServiceNodeMapAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getServiceNodeMapAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getServiceNodeMapAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getServiceNodeMapOperationCompleted == null)) {
                this.getServiceNodeMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceNodeMapOperationCompleted);
            }
            this.InvokeAsync("getServiceNodeMap", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.getServiceNodeMapOperationCompleted, userState);
        }
        
        private void OngetServiceNodeMapOperationCompleted(object arg) {
            if ((this.getServiceNodeMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceNodeMapCompleted(this, new getServiceNodeMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getSOAMap", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public SOA getSOAMap([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getSOAMap", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            return ((SOA)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetSOAMap(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getSOAMap", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public SOA EndgetSOAMap(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SOA)(results[0]));
        }
        
        /// <remarks/>
        public void getSOAMapAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getSOAMapAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getSOAMapAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getSOAMapOperationCompleted == null)) {
                this.getSOAMapOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSOAMapOperationCompleted);
            }
            this.InvokeAsync("getSOAMap", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.getSOAMapOperationCompleted, userState);
        }
        
        private void OngetSOAMapOperationCompleted(object arg) {
            if ((this.getSOAMapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSOAMapCompleted(this, new getSOAMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getActiveHosts", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")]
        public HostListenEndPointInstance[] getActiveHosts(int serviceType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool serviceTypeSpecified, bool checkIsonline, [System.Xml.Serialization.XmlIgnoreAttribute()] bool checkIsonlineSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getActiveHosts", new object[] {
                        serviceType,
                        serviceTypeSpecified,
                        checkIsonline,
                        checkIsonlineSpecified,
                        csUser});
            return ((HostListenEndPointInstance[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetActiveHosts(int serviceType, bool serviceTypeSpecified, bool checkIsonline, bool checkIsonlineSpecified, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getActiveHosts", new object[] {
                        serviceType,
                        serviceTypeSpecified,
                        checkIsonline,
                        checkIsonlineSpecified,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public HostListenEndPointInstance[] EndgetActiveHosts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((HostListenEndPointInstance[])(results[0]));
        }
        
        /// <remarks/>
        public void getActiveHostsAsync(int serviceType, bool serviceTypeSpecified, bool checkIsonline, bool checkIsonlineSpecified, ServiceUsers csUser) {
            this.getActiveHostsAsync(serviceType, serviceTypeSpecified, checkIsonline, checkIsonlineSpecified, csUser, null);
        }
        
        /// <remarks/>
        public void getActiveHostsAsync(int serviceType, bool serviceTypeSpecified, bool checkIsonline, bool checkIsonlineSpecified, ServiceUsers csUser, object userState) {
            if ((this.getActiveHostsOperationCompleted == null)) {
                this.getActiveHostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActiveHostsOperationCompleted);
            }
            this.InvokeAsync("getActiveHosts", new object[] {
                        serviceType,
                        serviceTypeSpecified,
                        checkIsonline,
                        checkIsonlineSpecified,
                        csUser}, this.getActiveHostsOperationCompleted, userState);
        }
        
        private void OngetActiveHostsOperationCompleted(object arg) {
            if ((this.getActiveHostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActiveHostsCompleted(this, new getActiveHostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getActiveClients", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")]
        public HostListenEndPointInstance[] getActiveClients([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, bool checkOnline, [System.Xml.Serialization.XmlIgnoreAttribute()] bool checkOnlineSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getActiveClients", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        checkOnline,
                        checkOnlineSpecified,
                        traversePath,
                        csUser});
            return ((HostListenEndPointInstance[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetActiveClients(string targetHostNameIdentifier, string targetConfigServiceName, bool checkOnline, bool checkOnlineSpecified, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getActiveClients", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        checkOnline,
                        checkOnlineSpecified,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public HostListenEndPointInstance[] EndgetActiveClients(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((HostListenEndPointInstance[])(results[0]));
        }
        
        /// <remarks/>
        public void getActiveClientsAsync(string targetHostNameIdentifier, string targetConfigServiceName, bool checkOnline, bool checkOnlineSpecified, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getActiveClientsAsync(targetHostNameIdentifier, targetConfigServiceName, checkOnline, checkOnlineSpecified, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getActiveClientsAsync(string targetHostNameIdentifier, string targetConfigServiceName, bool checkOnline, bool checkOnlineSpecified, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getActiveClientsOperationCompleted == null)) {
                this.getActiveClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActiveClientsOperationCompleted);
            }
            this.InvokeAsync("getActiveClients", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        checkOnline,
                        checkOnlineSpecified,
                        traversePath,
                        csUser}, this.getActiveClientsOperationCompleted, userState);
        }
        
        private void OngetActiveClientsOperationCompleted(object arg) {
            if ((this.getActiveClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActiveClientsCompleted(this, new getActiveClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getConfigAudit", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public AuditConfigSetting[] getConfigAudit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getConfigAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            return ((AuditConfigSetting[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetConfigAudit(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getConfigAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public AuditConfigSetting[] EndgetConfigAudit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AuditConfigSetting[])(results[0]));
        }
        
        /// <remarks/>
        public void getConfigAuditAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getConfigAuditAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getConfigAuditAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getConfigAuditOperationCompleted == null)) {
                this.getConfigAuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetConfigAuditOperationCompleted);
            }
            this.InvokeAsync("getConfigAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.getConfigAuditOperationCompleted, userState);
        }
        
        private void OngetConfigAuditOperationCompleted(object arg) {
            if ((this.getConfigAuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getConfigAuditCompleted(this, new getConfigAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("purgeConfigAudit", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void purgeConfigAudit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int purgeConfigAuditResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool purgeConfigAuditResultSpecified) {
            object[] results = this.Invoke("purgeConfigAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            purgeConfigAuditResult = ((int)(results[0]));
            purgeConfigAuditResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginpurgeConfigAudit(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("purgeConfigAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndpurgeConfigAudit(System.IAsyncResult asyncResult, out int purgeConfigAuditResult, out bool purgeConfigAuditResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            purgeConfigAuditResult = ((int)(results[0]));
            purgeConfigAuditResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void purgeConfigAuditAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.purgeConfigAuditAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void purgeConfigAuditAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.purgeConfigAuditOperationCompleted == null)) {
                this.purgeConfigAuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpurgeConfigAuditOperationCompleted);
            }
            this.InvokeAsync("purgeConfigAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.purgeConfigAuditOperationCompleted, userState);
        }
        
        private void OnpurgeConfigAuditOperationCompleted(object arg) {
            if ((this.purgeConfigAuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.purgeConfigAuditCompleted(this, new purgeConfigAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getClusterAudit", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public AuditCluster[] getClusterAudit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getClusterAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            return ((AuditCluster[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetClusterAudit(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getClusterAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public AuditCluster[] EndgetClusterAudit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AuditCluster[])(results[0]));
        }
        
        /// <remarks/>
        public void getClusterAuditAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.getClusterAuditAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void getClusterAuditAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.getClusterAuditOperationCompleted == null)) {
                this.getClusterAuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetClusterAuditOperationCompleted);
            }
            this.InvokeAsync("getClusterAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.getClusterAuditOperationCompleted, userState);
        }
        
        private void OngetClusterAuditOperationCompleted(object arg) {
            if ((this.getClusterAuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getClusterAuditCompleted(this, new getClusterAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("purgeClusterAudit", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void purgeClusterAudit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int purgeClusterAuditResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool purgeClusterAuditResultSpecified) {
            object[] results = this.Invoke("purgeClusterAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            purgeClusterAuditResult = ((int)(results[0]));
            purgeClusterAuditResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginpurgeClusterAudit(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("purgeClusterAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndpurgeClusterAudit(System.IAsyncResult asyncResult, out int purgeClusterAuditResult, out bool purgeClusterAuditResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            purgeClusterAuditResult = ((int)(results[0]));
            purgeClusterAuditResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void purgeClusterAuditAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.purgeClusterAuditAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void purgeClusterAuditAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.purgeClusterAuditOperationCompleted == null)) {
                this.purgeClusterAuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpurgeClusterAuditOperationCompleted);
            }
            this.InvokeAsync("purgeClusterAudit", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.purgeClusterAuditOperationCompleted, userState);
        }
        
        private void OnpurgeClusterAuditOperationCompleted(object arg) {
            if ((this.purgeClusterAuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.purgeClusterAuditCompleted(this, new purgeClusterAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getErrorLog", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public LogInfo[] getErrorLog([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string level) {
            object[] results = this.Invoke("getErrorLog", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser,
                        level});
            return ((LogInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetErrorLog(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, string level, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getErrorLog", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser,
                        level}, callback, asyncState);
        }
        
        /// <remarks/>
        public LogInfo[] EndgetErrorLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LogInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void getErrorLogAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, string level) {
            this.getErrorLogAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, level, null);
        }
        
        /// <remarks/>
        public void getErrorLogAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, string level, object userState) {
            if ((this.getErrorLogOperationCompleted == null)) {
                this.getErrorLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetErrorLogOperationCompleted);
            }
            this.InvokeAsync("getErrorLog", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser,
                        level}, this.getErrorLogOperationCompleted, userState);
        }
        
        private void OngetErrorLogOperationCompleted(object arg) {
            if ((this.getErrorLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getErrorLogCompleted(this, new getErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("purgeErrorLog", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void purgeErrorLog([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceNodeCommunication.DataContract")] TraverseNode[] traversePath, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser, out int purgeErrorLogResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool purgeErrorLogResultSpecified) {
            object[] results = this.Invoke("purgeErrorLog", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser});
            purgeErrorLogResult = ((int)(results[0]));
            purgeErrorLogResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginpurgeErrorLog(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("purgeErrorLog", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndpurgeErrorLog(System.IAsyncResult asyncResult, out int purgeErrorLogResult, out bool purgeErrorLogResultSpecified) {
            object[] results = this.EndInvoke(asyncResult);
            purgeErrorLogResult = ((int)(results[0]));
            purgeErrorLogResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void purgeErrorLogAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser) {
            this.purgeErrorLogAsync(targetHostNameIdentifier, targetConfigServiceName, traversePath, csUser, null);
        }
        
        /// <remarks/>
        public void purgeErrorLogAsync(string targetHostNameIdentifier, string targetConfigServiceName, TraverseNode[] traversePath, ServiceUsers csUser, object userState) {
            if ((this.purgeErrorLogOperationCompleted == null)) {
                this.purgeErrorLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpurgeErrorLogOperationCompleted);
            }
            this.InvokeAsync("purgeErrorLog", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        traversePath,
                        csUser}, this.purgeErrorLogOperationCompleted, userState);
        }
        
        private void OnpurgeErrorLogOperationCompleted(object arg) {
            if ((this.purgeErrorLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.purgeErrorLogCompleted(this, new purgeErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("getBindingInformation", RequestNamespace="ConfigService.ServiceConfiguration", ResponseNamespace="ConfigService.ServiceConfiguration", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ServiceConfiguration.DataContract")]
        public BindingInformation[] getBindingInformation([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetHostNameIdentifier, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string targetConfigServiceName, bool getConnectedServiceBindings, [System.Xml.Serialization.XmlIgnoreAttribute()] bool getConnectedServiceBindingsSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ServiceUsers csUser) {
            object[] results = this.Invoke("getBindingInformation", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        getConnectedServiceBindings,
                        getConnectedServiceBindingsSpecified,
                        csUser});
            return ((BindingInformation[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetBindingInformation(string targetHostNameIdentifier, string targetConfigServiceName, bool getConnectedServiceBindings, bool getConnectedServiceBindingsSpecified, ServiceUsers csUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getBindingInformation", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        getConnectedServiceBindings,
                        getConnectedServiceBindingsSpecified,
                        csUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public BindingInformation[] EndgetBindingInformation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BindingInformation[])(results[0]));
        }
        
        /// <remarks/>
        public void getBindingInformationAsync(string targetHostNameIdentifier, string targetConfigServiceName, bool getConnectedServiceBindings, bool getConnectedServiceBindingsSpecified, ServiceUsers csUser) {
            this.getBindingInformationAsync(targetHostNameIdentifier, targetConfigServiceName, getConnectedServiceBindings, getConnectedServiceBindingsSpecified, csUser, null);
        }
        
        /// <remarks/>
        public void getBindingInformationAsync(string targetHostNameIdentifier, string targetConfigServiceName, bool getConnectedServiceBindings, bool getConnectedServiceBindingsSpecified, ServiceUsers csUser, object userState) {
            if ((this.getBindingInformationOperationCompleted == null)) {
                this.getBindingInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBindingInformationOperationCompleted);
            }
            this.InvokeAsync("getBindingInformation", new object[] {
                        targetHostNameIdentifier,
                        targetConfigServiceName,
                        getConnectedServiceBindings,
                        getConnectedServiceBindingsSpecified,
                        csUser}, this.getBindingInformationOperationCompleted, userState);
        }
        
        private void OngetBindingInformationOperationCompleted(object arg) {
            if ((this.getBindingInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBindingInformationCompleted(this, new getBindingInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class TraverseNode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceNode MyNode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceNode MyInProcNode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ServiceNode[] PeerNodes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSName;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class ServiceNode {
        
        /// <remarks/>
        public int NodeID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NodeIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostNameIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NodeServiceName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigServiceImplementationClassName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Address;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Status;
        
        /// <remarks/>
        public float CPU;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CPUSpecified;
        
        /// <remarks/>
        public float ASPNETReqPerSec;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ASPNETReqPerSecSpecified;
        
        /// <remarks/>
        public float WCFReqPerSec;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WCFReqPerSecSpecified;
        
        /// <remarks/>
        public System.DateTime ActiveSince;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActiveSinceSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")]
        public HostListenEndPointInstance[] PrimaryListenEndpoints;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")]
        public HostListenEndPointInstance[] ConfigServiceListenEndpoints;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")]
        public HostListenEndPointInstance[] DCServiceListenEndpoints;
        
        /// <remarks/>
        public int VHostID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VHostIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OSVersionString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RuntimePlatform;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Exception;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public EPData[] EndPointData;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AzureRoleInstanceID;
        
        /// <remarks/>
        public int NodeInstanceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NodeInstanceIDSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")]
    public partial class HostListenEndPointInstance {
        
        /// <remarks/>
        public int InstanceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InstanceIDSpecified;
        
        /// <remarks/>
        public int RemoteInstanceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RemoteInstanceIDSpecified;
        
        /// <remarks/>
        public int ServiceHostID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceHostIDSpecified;
        
        /// <remarks/>
        public int HostedServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HostedServiceIDSpecified;
        
        /// <remarks/>
        public int ConnectedServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectedServiceIDSpecified;
        
        /// <remarks/>
        public int ConnectedConfigServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectedConfigServiceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceContract;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceImplementationClassName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceFriendlyName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostNameIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigServiceImplementationClassName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Configuration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InternalClientConfiguration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RemoteAddress;
        
        /// <remarks/>
        public int ServiceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceTypeSpecified;
        
        /// <remarks/>
        public System.DateTime ActiveSince;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActiveSinceSpecified;
        
        /// <remarks/>
        public int Active;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActiveSpecified;
        
        /// <remarks/>
        public int CSUserKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CSUserKeySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Status;
        
        /// <remarks/>
        public bool InUse;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InUseSpecified;
        
        /// <remarks/>
        public int VHostID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VHostIDSpecified;
        
        /// <remarks/>
        public int LoadBalanceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoadBalanceTypeSpecified;
        
        /// <remarks/>
        public bool UseHttps;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseHttpsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Exception;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LoadBalanceAddress;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class LogInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Source;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Message;
        
        /// <remarks/>
        public int Severity;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SeveritySpecified;
        
        /// <remarks/>
        public System.DateTime Time;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class AuditCluster {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public HostListenEndPointInstance Host;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostAddress;
        
        /// <remarks/>
        public int HostInstanceId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HostInstanceIdSpecified;
        
        /// <remarks/>
        public System.DateTime EventTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EventTimeSpecified;
        
        /// <remarks/>
        public int EventCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EventCodeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EventMessage;
        
        /// <remarks/>
        public int EntryId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EntryIdSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class AuditConfigSetting {
        
        /// <remarks/>
        public int EntryId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EntryIdSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string KeyName;
        
        /// <remarks/>
        public System.DateTime UpdateTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UpdateTimeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OldValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NewValue;
        
        /// <remarks/>
        public int SuccessCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SuccessCodeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UserId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Message;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class CacheServers {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServerName;
        
        /// <remarks/>
        public int Port;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PortSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class DistributedCaches {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AuthorizationToken;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Status;
        
        /// <remarks/>
        public double LocalCacheLatency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocalCacheLatencySpecified;
        
        /// <remarks/>
        public double DistributedCacheLatency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DistributedCacheLatencySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DataCacheSecurityMode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DataCacheProtectionLevel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Exception;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public CacheServers[] CacheServers;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class Queries {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SQLStatement;
        
        /// <remarks/>
        public float AvgCPUTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AvgCPUTimeSpecified;
        
        /// <remarks/>
        public float LastCPUTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastCPUTimeSpecified;
        
        /// <remarks/>
        public float AvgExecutionTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AvgExecutionTimeSpecified;
        
        /// <remarks/>
        public float LastExecutionTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastExecutionTimeSpecified;
        
        /// <remarks/>
        public float TotalExecutions;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalExecutionsSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class Database {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DatabaseName;
        
        /// <remarks/>
        public float DatabaseSize;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DatabaseSizeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public Queries[] TopWorstByCPUTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public Queries[] TopBestByCPUTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public Queries[] TopBestByExecTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public Queries[] TopWorstByExecTime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServerName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Version;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Edition;
        
        /// <remarks/>
        public double Latency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LatencySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Exception;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class DatabaseServer {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServerName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Version;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public Database[] MyDatabases;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Edition;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Exception;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class SOA {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public SOA[] ConnectedSOAs;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SOAName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public VirtualHost MyVirtualHost;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public DatabaseServer[] MyDatabaseServers;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public DistributedCaches[] MyDistributedCaches;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class VirtualHost {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ServiceNode[] ServiceNodes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostNameIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigServiceName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string VHostName;
        
        /// <remarks/>
        public float TotalASPNETRecPerSec;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalASPNETRecPerSecSpecified;
        
        /// <remarks/>
        public float TotalWCFRecPerSec;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalWCFRecPerSecSpecified;
        
        /// <remarks/>
        public float AvgCPU;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AvgCPUSpecified;
        
        /// <remarks/>
        public float RequestsPerDay;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequestsPerDaySpecified;
        
        /// <remarks/>
        public float TotalRequests;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalRequestsSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class ConnectionPoints {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostNameIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigServiceImplementationClassName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ConnectedServices[] ConnectedServices;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceNodeCommunication.DataContract")]
        public HostListenEndPointInstance[] MyConnectionPoints;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class ConnectedServices {
        
        /// <remarks/>
        public int ConnectedServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectedServiceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceImplementationClassName;
        
        /// <remarks/>
        public int ServiceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceContract;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostNameIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DefaultAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ClientConfiguration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string BindingType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceFriendlyName;
        
        /// <remarks/>
        public int ConnectedConfigServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectedConfigServiceIDSpecified;
        
        /// <remarks/>
        public int HostedServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HostedServiceIDSpecified;
        
        /// <remarks/>
        public int csUserKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool csUserKeySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OnlineMethod;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OnlineParms;
        
        /// <remarks/>
        public int VHostID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VHostIDSpecified;
        
        /// <remarks/>
        public int LoadBalanceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoadBalanceTypeSpecified;
        
        /// <remarks/>
        public bool UseHttps;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseHttpsSpecified;
        
        /// <remarks/>
        public bool UseDefaultClientCredentials;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseDefaultClientCredentialsSpecified;
        
        /// <remarks/>
        public int DefaultCredentialUserKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultCredentialUserKeySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SecurityMode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class ClientInformation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ElementName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string BindingConfiguration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EndpointConfiguration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Contract;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class BindingInformation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string BindingConfigurationName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string BindingType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SecurityMode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ConfigService.ServiceConfiguration.DataContract")]
    public partial class ConfigurationKeyValues {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigurationKeyDisplayName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigurationKeyFieldName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigurationKeyValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigurationKeyDataType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigurationKeyDescription;
        
        /// <remarks/>
        public bool ConfigurationKeyReadOnly;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConfigurationKeyReadOnlySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigurationKeyValidValues;
        
        /// <remarks/>
        public System.DateTime ConfigurationKeyLastUpdate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConfigurationKeyLastUpdateSpecified;
        
        /// <remarks/>
        public int ConfigurationKeyLevel;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConfigurationKeyLevelSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OriginatingConfigServiceName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OriginatingHostNameIdentifier;
        
        /// <remarks/>
        public int DisplayOrder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayOrderSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GroupName;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class ServiceConfigurationData {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.ServiceConfiguration.DataContract")]
        public ConfigurationKeyValues[] ConfigurationData;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceHost;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigServiceImplementationClassName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceContract;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceHoster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServicePlatform;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceAdministratorContact;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ConnectedServices[] ConnectedServices;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public HostedServices[] HostedServices;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InProcessHost;
        
        /// <remarks/>
        public int Rights;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RightsSpecified;
        
        /// <remarks/>
        public int ServiceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public BindingInformation[] BindingInformation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ServiceConfigurationData[] ConnectedServiceConfigurationData;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ConnectedConfigServices[] ConnectedConfigServices;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] EndpointBehaviorNames;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] EndpointIdentityNames;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="ConfigService.RuntimeHostData.DataContract")]
        public ServiceHostInfo[] ServiceHostInfoList;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] ServiceBehaviorNames;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ClientInformation[] ClientInformation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] ClientContracts;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RunTimePlatform;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AllowedRemoteList;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class HostedServices {
        
        /// <remarks/>
        public int ServiceHostID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceHostIDSpecified;
        
        /// <remarks/>
        public int HostedServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HostedServiceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceImplementationClassName;
        
        /// <remarks/>
        public int ServiceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceBinding;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string BindingType;
        
        /// <remarks/>
        public bool UseHttps;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseHttpsSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string VirtualPath;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Port;
        
        /// <remarks/>
        public int LoadBalanceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoadBalanceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LoadBalanceAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceContract;
        
        /// <remarks/>
        public bool Activated;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActivatedSpecified;
        
        /// <remarks/>
        public bool MarkedForFailover;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MarkedForFailoverSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FriendlyName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DefaultAddress;
        
        /// <remarks/>
        public int csUserKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool csUserKeySpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InternalClientConfiguration;
        
        /// <remarks/>
        public bool IsBaseAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsBaseAddressSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EndPointBehavior;
        
        /// <remarks/>
        public bool mex;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mexSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OnlineMethod;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OnlineParms;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string IdentityConfigName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] ServiceContracts;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SecurityMode;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class ConnectedConfigServices {
        
        /// <remarks/>
        public int ConnectedConfigServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectedConfigServiceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceImplementationClassName;
        
        /// <remarks/>
        public int ServiceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceTypeSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceContract;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostNameIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ClientConfiguration;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string BindingType;
        
        /// <remarks/>
        public bool Active;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActiveSpecified;
        
        /// <remarks/>
        public int csUserKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool csUserKeySpecified;
        
        /// <remarks/>
        public int VHostID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VHostIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Address;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OnlineMethod;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OnlineParms;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public HostedServices[] PrimaryHostedServices;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InitialCSUserID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InitialCSPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceFriendlyName;
        
        /// <remarks/>
        public int LoadBalanceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoadBalanceTypeSpecified;
        
        /// <remarks/>
        public bool UseHttps;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseHttpsSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ConfigService.RuntimeHostData.DataContract")]
    public partial class ServiceHostInfo {
        
        /// <remarks/>
        public int ServiceHostID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceHostIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostName;
        
        /// <remarks/>
        public bool IsWorkflowHost;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsWorkflowHostSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] ServiceBehaviorNames;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] ServiceContractNames;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class LoginInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ServiceUsers CsUser;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostNameIdentifier;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfigServiceName;
        
        /// <remarks/>
        public int HostedServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HostedServiceIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceHoster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RuntimePlatform;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class ServiceUsers {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UserId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Password;
        
        /// <remarks/>
        public int Rights;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RightsSpecified;
        
        /// <remarks/>
        public int UserKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserKeySpecified;
        
        /// <remarks/>
        public bool LocalUser;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocalUserSpecified;
        
        /// <remarks/>
        public int ConnectedConfigServiceID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectedConfigServiceIDSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class CustomAction {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ActionToPerform;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] Arguments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceConfiguration.DataContract")]
    public partial class MasterServiceHostInstance {
        
        /// <remarks/>
        public int ServiceHostID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceHostIDSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HostName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceImplementationClass;
        
        /// <remarks/>
        public int HostEnvironment;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HostEnvironmentSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HttpHostHeaderName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TcpHostHeaderName;
        
        /// <remarks/>
        public int ServiceType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ServiceTypeSpecified;
        
        /// <remarks/>
        public bool IsWorkFlowServiceHost;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsWorkFlowServiceHostSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ServiceBehaviorConfiguration;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ServiceNodeCommunication.DataContract")]
    public partial class EPData {
        
        /// <remarks/>
        public System.DateTime ActiveSince;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActiveSinceSpecified;
        
        /// <remarks/>
        public float TotalRequests;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalRequestsSpecified;
        
        /// <remarks/>
        public float RequestsPerDay;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequestsPerDaySpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getMyConfigServiceDetailsCompletedEventHandler(object sender, getMyConfigServiceDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMyConfigServiceDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMyConfigServiceDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ConnectedConfigServices[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ConnectedConfigServices[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getMyConnectedConfigServicesCompletedEventHandler(object sender, getMyConnectedConfigServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMyConnectedConfigServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMyConnectedConfigServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ConnectedConfigServices[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ConnectedConfigServices[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getStartupVirtualServiceHostsCompletedEventHandler(object sender, getStartupVirtualServiceHostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStartupVirtualServiceHostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStartupVirtualServiceHostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceHostInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceHostInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getVirtualServiceHostsCompletedEventHandler(object sender, getVirtualServiceHostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVirtualServiceHostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getVirtualServiceHostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MasterServiceHostInstance[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MasterServiceHostInstance[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveCustomActionCompletedEventHandler(object sender, receiveCustomActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveCustomActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveCustomActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int receiveCustomActionResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveCustomActionResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveRemoveDownedNodeCompletedEventHandler(object sender, receiveRemoveDownedNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveRemoveDownedNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveRemoveDownedNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int receiveRemoveDownedNodeResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveRemoveDownedNodeResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void isOnlineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getTraversePathCompletedEventHandler(object sender, getTraversePathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTraversePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTraversePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TraverseNode[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TraverseNode[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void loginCompletedEventHandler(object sender, loginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LoginInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveAddServiceHostCompletedEventHandler(object sender, receiveAddServiceHostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveAddServiceHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveAddServiceHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool receiveAddServiceHostResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveAddServiceHostResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveRemoveServiceHostCompletedEventHandler(object sender, receiveRemoveServiceHostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveRemoveServiceHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveRemoveServiceHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool receiveRemoveServiceHostResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveRemoveServiceHostResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveAddServiceClientCompletedEventHandler(object sender, receiveAddServiceClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveAddServiceClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveAddServiceClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool receiveAddServiceClientResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveAddServiceClientResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveRemoveServiceClientCompletedEventHandler(object sender, receiveRemoveServiceClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveRemoveServiceClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveRemoveServiceClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool receiveRemoveServiceClientResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveRemoveServiceClientResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveRemoveServicesCompletedEventHandler(object sender, receiveRemoveServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveRemoveServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveRemoveServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int receiveRemoveServicesResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveRemoveServicesResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getServiceConfigurationCompletedEventHandler(object sender, getServiceConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceConfigurationData[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceConfigurationData[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getServiceConfigurationKeyCompletedEventHandler(object sender, getServiceConfigurationKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceConfigurationKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceConfigurationKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ConfigurationKeyValues Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ConfigurationKeyValues)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveConfigurationKeyCompletedEventHandler(object sender, receiveConfigurationKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveConfigurationKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveConfigurationKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int receiveConfigurationKeyResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveConfigurationKeyResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getConnectionPointsCompletedEventHandler(object sender, getConnectionPointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConnectionPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConnectionPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ConnectionPoints Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ConnectionPoints)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getConnectionPointCompletedEventHandler(object sender, getConnectionPointCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConnectionPointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConnectionPointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ConnectionPoints Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ConnectionPoints)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveConnectionPointCompletedEventHandler(object sender, receiveConnectionPointCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveConnectionPointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveConnectionPointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int receiveConnectionPointResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveConnectionPointResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getServiceUsersCompletedEventHandler(object sender, getServiceUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceUsers[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceUsers[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveUserCompletedEventHandler(object sender, receiveUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int receiveUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void receiveServiceCompletedEventHandler(object sender, receiveServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class receiveServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal receiveServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int receiveServiceResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool receiveServiceResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getServiceNodeMapCompletedEventHandler(object sender, getServiceNodeMapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceNodeMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceNodeMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VirtualHost Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VirtualHost)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getSOAMapCompletedEventHandler(object sender, getSOAMapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSOAMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSOAMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SOA Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SOA)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getActiveHostsCompletedEventHandler(object sender, getActiveHostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActiveHostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActiveHostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HostListenEndPointInstance[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HostListenEndPointInstance[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getActiveClientsCompletedEventHandler(object sender, getActiveClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActiveClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActiveClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HostListenEndPointInstance[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HostListenEndPointInstance[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getConfigAuditCompletedEventHandler(object sender, getConfigAuditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getConfigAuditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getConfigAuditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditConfigSetting[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditConfigSetting[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void purgeConfigAuditCompletedEventHandler(object sender, purgeConfigAuditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class purgeConfigAuditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal purgeConfigAuditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int purgeConfigAuditResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool purgeConfigAuditResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getClusterAuditCompletedEventHandler(object sender, getClusterAuditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getClusterAuditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getClusterAuditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuditCluster[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuditCluster[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void purgeClusterAuditCompletedEventHandler(object sender, purgeClusterAuditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class purgeClusterAuditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal purgeClusterAuditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int purgeClusterAuditResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool purgeClusterAuditResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getErrorLogCompletedEventHandler(object sender, getErrorLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getErrorLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getErrorLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void purgeErrorLogCompletedEventHandler(object sender, purgeErrorLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class purgeErrorLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal purgeErrorLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int purgeErrorLogResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool purgeErrorLogResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getBindingInformationCompletedEventHandler(object sender, getBindingInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBindingInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBindingInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BindingInformation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BindingInformation[])(this.results[0]));
            }
        }
    }
}
